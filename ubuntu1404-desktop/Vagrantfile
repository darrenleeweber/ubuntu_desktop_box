# -*- mode: ruby -*-
# vi: set ft=ruby :

# This vagrant script relies on
# vagrant plugin install vagrant-triggers

VM_NAME = 'ubuntu1404-dev'
VM_CPUS = 2
VM_MEMORY = 4 * 1024 # in MB

require_relative 'scripts/data_disk'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.  This one is an Ubuntu LTS.
  config.vm.box = "boxcutter/ubuntu1404-desktop"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.50.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.  Note that shared folders
  # suffer significant performance deficits over native disks.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  #
  # View the documentation for the provider you are using for more
  # information on available options; e.g.
  # https://docs.vagrantup.com/v2/virtualbox/configuration.html
  # http://www.virtualbox.org/manual/ch08.html
  config.vm.provider "virtualbox" do |v|
    v.gui = true
    v.name = VM_NAME
    v.cpus = VM_CPUS
    v.memory = VM_MEMORY # MB
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Triggers, depends on:
  # vagrant plugin install vagrant-triggers
  config.trigger.before :up do
    data_disk_attach
  end
  config.trigger.before :destroy do
    data_disk_detach
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available.  See the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", path: 'scripts/data_disk_setup.sh'
  config.vm.provision "shell", path: 'scripts/update.sh'
  config.vm.provision "shell", path: 'scripts/cleanup.sh'
  config.vm.provision "shell", path: 'scripts/add_user.sh'

  # packages
  packages = Dir.glob('scripts/packages/*.sh')
  packages.each {|p| config.vm.provision "shell", path: p }
end
